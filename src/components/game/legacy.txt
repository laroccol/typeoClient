const OnKeyUp = (event) => {
    let key = event.key;
    if (
      key === " " &&
      isCorrect &&
      key === textAreaText[tempCurrentCharIndex - 1]
    ) {
      inputRef.current.value = "";
      return;
    }
    if (key === textAreaText[tempCurrentCharIndex - 1] && isCorrect) {
      if (tempCurrentCharIndex >= textAreaText.length) {
        OnEndRace();
      }
    }
    if (!isRaceRunning && key.length === 1) {
      console.log("Starting Test");
      OnStartRace();
    }
  };

  const OnKeyDown = (event) => {
    let key = event.key;
    setUpdatedText(inputRef.current.value);
    if (!isCorrect && key.length === 1) {
      setCounter(tempCounter + 1);
      tempCounter += 1;
    }
    if (!isRaceRunning && key.length === 1) {
      console.log("Starting Test");
      OnStartRace();
    }
    if (key === "Backspace") {
      if (tempCurrentCharIndex > tempCurrentWordIndex) {
        if (inputRef.current.value == "" && updatedText.length > 0) {
          setCurrentCharIndex(tempCurrentCharIndex - (tempCounter + 1));
          tempCurrentCharIndex -= tempCounter + 1;
          setCounter(0);
          tempCounter = 0;
        } else {
          setCurrentCharIndex(tempCurrentCharIndex - 1);
          tempCurrentCharIndex--;
          if (tempCounter > 0) {
            setCounter(tempCounter - 1);
            tempCounter -= 1;
          }
        }

        if (isCorrect || tempCurrentCharIndex <= tempErrorIndex) {
          //updateTextStyle(tempCurrentCharIndex, true, tempCurrentCharIndex);
        } else {
          //updateTextStyle(tempErrorIndex, true, tempCurrentCharIndex);
        }
        if (tempCurrentCharIndex <= tempErrorIndex) {
          setIsCorrect(true);
          inputRef.current.style.backgroundColor = "#263238";
        }
      }
      setLastKey(key);
      return;
    }
    /*if (key === "Backspace")
        {
            if (currentChar > currentWord)
            {
                if (textInput.length > updatedText.length) {
                    currentChar-=(counter+1);
                    counter = 0;
                } else {
                    currentChar--;
                    if (counter >= 0) {
                        counter--;
                        console.log("Subtracted one from counter, new counter is:", counter);
                    }
                }

                if (isCorrect || currentChar <= incorrectIndex)
                {
                    updateTextStyle(currentChar, true)
                    //textArea.innerHTML = '<span style="color: #00b9d8;">'+textAreaText.substring(0, currentChar - 1)+'</span><span class="blinking-cursor">|</span>' + textAreaText.substring(currentChar - 1, textAreaText.length);
                }
                else
                {
                    updateTextStyle(incorrectIndex, true);
                    //textArea.innerHTML = '<span style="color: #00b9d8;">'+textAreaText.substring(0, incorrectIndex)+'</span><span class="blinking-cursor">|</span>' + '<span style="background-color: #ed5353;">'+textAreaText.substring(incorrectIndex, currentChar - 1)+'</span>' + textAreaText.substring(currentChar - 1, textAreaText.length);
                }
                if (currentChar <= incorrectIndex) 
                {
                    isCorrect = true;
                    textInput.style.backgroundColor = "#263238";
                }
                
            }
            lastKey = key;
            return;
        }*/

    if (key.length !== 1) return;
    if (
      key === " " &&
      isCorrect &&
      key === textAreaText[tempCurrentCharIndex]
    ) {
      inputRef.current.value = "";
      setCurrentCharIndex(tempCurrentCharIndex + 1);
      tempCurrentCharIndex++;
      setCurrentWordIndex(tempCurrentCharIndex);
      tempCurrentWordIndex = tempCurrentCharIndex;
      setWordsTyped(tempWordsTyped + 1);
      tempWordsTyped++;
      setLockOut(false);
      //updateTextStyle(tempCurrentCharIndex, false, tempCurrentCharIndex);

      // let currentProgress = wordsTyped / words.length * 100;
      // let wpm = (((tempCurrentCharIndex / 5) / (Date.now() - startTime)) * 60000).toFixed(1);
      // socket.emit('updateProgress', currentMatchID, currentProgress, wpm);

      if (tempWordsTyped % numWpmIntervals === 0) {
        OnIntervalEnd();
      }
      setLastKey(key);
      return;
    } else if (key === textAreaText[tempCurrentCharIndex] && isCorrect) {
      //textArea.innerHTML = '<span style="color: #00b9d8;">'+textAreaText.substring(0, currentChar + 1)+'</span><span class="blinking-cursor">|</span>' + textAreaText.substring(currentChar + 1, textAreaText.length);
      setCurrentCharIndex(tempCurrentCharIndex + 1);
      tempCurrentCharIndex++;
      //updateTextStyle(tempCurrentCharIndex, false, tempCurrentCharIndex);

      if (tempCurrentCharIndex >= textAreaText.length - 1) {
        return;
      }
    } else if (key !== textAreaText[tempCurrentCharIndex] || !isCorrect) {
      let tempErrorIndex = errorIndex;
      if (isCorrect) {
        setIsCorrect(false);
        setErrorIndex(tempCurrentCharIndex);
        tempErrorIndex = tempCurrentCharIndex;
        //let wordMissed = words[wordsTyped].toLowerCase();
        //missedWords[wordMissed] = (missedWords[wordMissed] + 1) || 1;
        if (lastKey !== "Backspace")
          setCurrentMissedChars(currentMissedChars + 1);
      }
      //textArea.innerHTML = '<span style="color: #00b9d8;">'+textAreaText.substring(0, incorrectIndex)+'</span><span class="blinking-cursor">|</span>' + '<span style="background-color: #ed5353;">'+textAreaText.substring(incorrectIndex, currentChar + 1)+'</span>' + textAreaText.substring(currentChar + 1, textAreaText.length);
      setCurrentCharIndex(tempCurrentCharIndex + 1);
      tempCurrentCharIndex++;
      //updateTextStyle(tempErrorIndex, false, tempCurrentCharIndex);
      inputRef.current.style.backgroundColor = "rgba(255, 0, 0, 0.5)";
    }
    setLastKey(key);
    if (
      !isCorrect &&
      key.length == 1 &&
      lastKey != "Control" &&
      lastKey != "Alt"
    ) {
      if (!lockOut) {
        setCurrentMissedChars(currentMissedWords + 1);
        setLockOut(true);
      }
    }
  };